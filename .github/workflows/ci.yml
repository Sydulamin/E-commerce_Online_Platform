name: CI Pipeline

on:
  push:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ecommerce_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do  # Retry up to 30 times
            if docker exec -T $(docker ps -q --filter "ancestor=postgres") pg_isready -U postgres -d ecommerce_db; then
              echo "PostgreSQL is ready!"
              break
            else
              echo "Waiting for PostgreSQL..."
              sleep 10  # Increase sleep time
            fi
          done

      - name: Check PostgreSQL Logs
        run: |
          docker logs $(docker ps -q --filter "ancestor=postgres")

      - name: Apply migrations
        run: |
          source venv/bin/activate
          python manage.py migrate
        env:
          DB_HOST: postgres  # Corrected to use the service name in Docker network

      - name: Run Tests
        run: |
          source venv/bin/activate
          python manage.py test
        env:
          DB_HOST: postgres  # Corrected to use the service name in Docker network

      - name: Build Docker Image
        run: docker build -f Dockerfile -t ecommerce-backend .

      - name: Run Docker Container (Wait for Startup)
        run: |
          docker run -d --name ecommerce-backend -p 8000:8000 ecommerce-backend
          echo "Waiting for container to start..."
          until curl --silent --fail http://localhost:8000/api/products/; do
            echo "Waiting for API to be available..."
            sleep 5
          done
          docker logs ecommerce-backend

      - name: Check If API is Running
        run: |
          curl --retry 5 --retry-delay 5 --fail http://localhost:8000/api/products/ || exit 1

      - name: Stop and Remove Container
        run: |
          docker stop ecommerce-backend
          docker rm ecommerce-backend

      - name: Clean up
        run: docker system prune -f --volumes
